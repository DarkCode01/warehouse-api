generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Warehouse {
  id         String   @id @default(uuid())
  name       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  aisles     Aisle[]
  bins       Bin[]
  plans      AuditPlan[]

  @@map("warehouses")
}

model Aisle {
  id           String    @id @default(uuid())
  code         String
  name         String
  warehouse_id String
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)
  racks        Rack[]

  @@map("aisles")
}

model Rack {
  id         String   @id @default(uuid())
  number     Int
  aisleId    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  bins       Bin[]
  aisle      Aisle    @relation(fields: [aisleId], references: [id], onDelete: Cascade)

  @@map("racks")
}

model Bin {
  id                String    @id @default(uuid())
  code              String    @unique
  position          Int
  rack_id           String
  warehouse_id      String
  pallet_count      Int       @default(0)
  capacity          Int       @default(10)
  last_audit_date   DateTime?
  risk_score        Int       @default(0)
  audit_factor      Int       @default(0)
  activity_factor   Int       @default(0)
  adjustment_factor Int       @default(0)
  is_active         Boolean   @default(true)
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  rack              Rack      @relation(fields: [rack_id], references: [id], onDelete: Cascade)
  warehouse         Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)

  BinActivity BinActivity[]
  AuditTask AuditTask[]
  AuditResult AuditResult[]

  @@map("bins")
}

model BinActivity {
  id           String      @id @default(uuid())
  bin_id        String
  type         ActivityType
  quantity     Int         @default(1)
  notes        String?
  created_at     DateTime  @default(now())
  
  bin          Bin @relation(fields: [bin_id], references: [id], onDelete: Cascade)
  
  @@map("bin_activities")
}

enum ActivityType {
  PUTAWAY
  PICK
  MOVE
  ADJUSTMENT
  AUDIT
}


// ============= Audit Plans =============

model AuditPlan {
  id          String     @id @default(uuid())
  name        String     // "Plan #001 - Bins Alto Riesgo"
  description String?
  status      PlanStatus @default(ACTIVE)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  warehouse_id String
  warehouse    Warehouse @relation(fields: [warehouse_id], references: [id], onDelete: Cascade)

  tasks       AuditTask[]
  
  @@map("audit_plans")
}

enum PlanStatus {
  ACTIVE
  COMPLETED
}


// ============= Audit Tasks =============

model AuditTask {
  id        String     @id @default(uuid())
  planId    String
  bin_id     String
  status    TaskStatus @default(PENDING)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  
  plan      AuditPlan    @relation(fields: [planId], references: [id], onDelete: Cascade)
  bin       Bin          @relation(fields: [bin_id], references: [id], onDelete: Cascade)
  result   AuditResult?

  @@unique([bin_id, status], name: "unique_pending_task_per_bin")
  @@map("audit_tasks")
}

enum TaskStatus {
  PENDING
  DONE
}

// ============= Audit Results =============

model AuditResult {
  id            String      @id @default(uuid())
  taskId        String?
  bin_id         String
  expected_count Int
  actual_count   Int
  discrepancy   Int
  status        AuditStatus
  notes         String?
  
  task          AuditTask? @relation(fields: [taskId], references: [id], onDelete: SetNull)
  bin           Bin       @relation(fields: [bin_id], references: [id], onDelete: Cascade)
  
  @@map("audit_results")
}

enum AuditStatus {
  PASS
  FAIL
}